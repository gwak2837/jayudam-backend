type User {
  id: UUID!
  creationTime: DateTime!
  bio: String
  birthyear: Int
  blockingStartTime: DateTime
  blockingEndTime: DateTime
  certificateAgreement: CertificateAgreement
  cherry: NonNegativeInt!
  email: EmailAddress
  imageUrls: [URL!]
  isVerifiedBirthyear: Boolean!
  isVerifiedBirthday: Boolean!
  isVerifiedEmail: Boolean!
  isVerifiedName: Boolean!
  isVerifiedPhoneNumber: Boolean!
  isVerifiedSex: Boolean!
  nickname: String
  serviceAgreement: ServiceAgreement
  sex: Sex!
  towns: [Town!]
}

type CertificateAgreement {
  showBirthyear: Boolean!
  showName: Boolean!
  showSTDTestDetails: Boolean!
  stdTestSince: Date
  showImmunizationDetails: Boolean!
  immunizationSince: Date
  showSexualCrimeDetails: Boolean!
  sexualCrimeSince: Date
}

type ServiceAgreement {
  termsAgreement: Boolean
  termsAgreementTime: DateTime
  privacyAgreement: Boolean
  privacyAgreementTime: DateTime
  locationAgreement: Boolean
  locationAgreementTime: DateTime
  adAgreement: Boolean
  adAgreementTime: DateTime
  personalDataStoringYear: NonNegativeInt
}

type Town {
  name: NonEmptyString!
  count: NonNegativeInt!
}

enum Sex {
  UNKNOWN
  MALE
  FEMALE
  OTHER
}
