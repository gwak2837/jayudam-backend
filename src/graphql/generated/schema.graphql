scalar Any

type Certificate {
  birthDate: Date
  content: String
  effectiveDate: Date
  id: ID!
  issueDate: Date
  name: NonEmptyString
  sex: Sex!
}

input CertificateAgreement {
  immunizationSince: Date
  sexualCrimeSince: Date
  showBirthyear: Boolean
  showImmunizationDetails: Boolean
  showName: Boolean
  showSTDTestDetails: Boolean
  showSex: Boolean
  showSexualCrimeDetails: Boolean
  stdTestSince: Date
}

input CertificateCreationInput {
  birthDate: DateTime!
  issueDate: DateTime!
  name: NonEmptyString!
  sex: Sex!
  verificationCode: NonEmptyString!
}

scalar Date

scalar DateTime

scalar EmailAddress

scalar JWT

scalar Latitude

type Location {
  count: NonNegativeInt!
  name: NonEmptyString!
}

input LocationInput {
  count: NonNegativeInt!
  name: NonEmptyString!
}

scalar Longitude

type Mutation {
  connectToGoogleOAuth: Boolean
  connectToKakaoOAuth: Boolean
  connectToNaverOAuth: Boolean
  createPost(input: PostCreationInput!): Post
  deletePost(id: ID!): Post
  disconnectFromGoogleOAuth: Boolean
  disconnectFromKakaoOAuth: Boolean
  disconnectFromNaverOAuth: Boolean
  logout: User
  submitCertificateInfo(input: CertificateCreationInput!): Boolean
  takeAttendance: User
  unregister: User
  updatePost(input: PostUpdateInput!): Post
  updateUser(input: UserUpdate!): User
  wakeUser: User
}

scalar NonEmptyString

scalar NonNegativeInt

"""
기본값: 내림차순
"""
enum OrderDirection {
  ASC
}

input Pagination {
  lastId: ID
  lastValue: Any
  limit: PositiveInt!
}

scalar PositiveInt

type Post {
  author: User
  content: NonEmptyString
  creationTime: DateTime
  deletionTime: DateTime
  id: ID!
  imageUrls: [URL]
  likeCount: NonNegativeInt
  modificationTime: DateTime
}

input PostCreationInput {
  content: NonEmptyString!
  imageUrls: [URL!]
  parentPostId: ID
}

input PostUpdateInput {
  content: NonEmptyString!
  id: ID!
  imageUrls: [URL!]
}

type Query {
  getCertificateJWT(input: CertificateAgreement): JWT!
  getMyCertificates: [Certificate!]
  isUniqueNickname(nickname: NonEmptyString!): Boolean!
  me: User
  post(id: ID!): Post
  posts: [Post!]
  userByNickname(nickname: NonEmptyString!): User
  verifyCertificateJWT(jwt: JWT!): Certificate
}

type Setting {
  immunizationSince: Date
  sexualCrimeSince: Date
  showBirthyear: Boolean!
  showImmunizationDetails: Boolean!
  showName: Boolean!
  showSTDTestDetails: Boolean!
  showSexualCrimeDetails: Boolean!
  stdTestSince: Date
}

enum Sex {
  FEMALE
  MALE
  OTHER
  UNKNOWN
}

scalar URL

scalar UUID

type User {
  bio: String
  birthyear: Int
  blockingEndTime: DateTime
  blockingStartTime: DateTime
  cherry: NonNegativeInt!
  creationTime: DateTime!
  id: UUID!
  imageUrls: [URL!]
  isVerifiedBirthday: Boolean!
  isVerifiedBirthyear: Boolean!
  isVerifiedEmail: Boolean!
  isVerifiedName: Boolean!
  isVerifiedPhoneNumber: Boolean!
  isVerifiedSex: Boolean!
  locations: [Location!]
  nickname: String
  settings: Setting
  sex: Sex!
}

input UserUpdate {
  bio: NonEmptyString
  email: EmailAddress
  imageUrls: [URL!]
  locations: [LocationInput!]
  nickname: NonEmptyString
  settings: CertificateAgreement
}
