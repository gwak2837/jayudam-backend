type Certificate {
  birthDate: String
  certificateId: String
  content: String
  creationTime: DateTime!
  effectiveDate: Date
  issueDate: Date
  name: NonEmptyString
  sex: Sex
  userId: UUID!
}

scalar Date

scalar DateTime

scalar EmailAddress

scalar JWT

scalar LastValue

scalar Latitude

scalar Longitude

type Mutation {
  logout: Boolean!

  """
  로그아웃 성공 여부 반환
  """
  submitMyCertificate: Boolean!

  """
  회원탈퇴 시 사용자 정보가 모두 초기화됩니다
  """
  unregister: User

  """
  사용자 정보를 수정합니다
  """
  updateUser(input: UserModificationInput!): User
}

scalar NonEmptyString

scalar NonNegativeInt

"""
기본값: 내림차순
"""
enum OrderDirection {
  ASC
}

input Pagination {
  lastId: ID
  lastValue: LastValue
  limit: PositiveInt!
}

scalar PositiveInt

type Query {
  getCertificateJWT: JWT!
  isNicknameUnique(nickname: NonEmptyString!): Boolean!
  me: User
  userByNickname(nickname: NonEmptyString!): User
  verifyCertificateJWT(jwt: JWT!): Certificate
}

enum Sex {
  FEMALE
  MALE
  OTHER
  UNKNOWN
}

scalar URL

scalar UUID

type User {
  bio: String
  birthyear: Int
  creationTime: DateTime!
  id: UUID!
  imageUrl: URL
  nickname: String
  sex: Sex!
}

input UserModificationInput {
  ageRange: NonEmptyString
  bio: String
  birthday: NonEmptyString
  email: EmailAddress
  imageUrl: URL
  nickname: NonEmptyString
  phoneNumber: NonEmptyString
  sex: Sex
}
