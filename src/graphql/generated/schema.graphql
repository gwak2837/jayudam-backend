scalar Any

type Cert {
  birthdate: Date
  content: String
  effectiveDate: Date
  id: ID!
  issueDate: Date
  name: NonEmptyString
  sex: Sex
  type: CertType!
}

type CertAgreement {
  immunizationSince: Date
  sexualCrimeSince: Date
  showBirthdate: Boolean!
  showImmunizationDetails: Boolean!
  showName: Boolean!
  showSTDTestDetails: Boolean!
  showSex: Boolean!
  showSexualCrimeDetails: Boolean!
  stdTestSince: Date
}

input CertAgreementInput {
  immunizationSince: Date
  sexualCrimeSince: Date
  showBirthdate: Boolean
  showImmunizationDetails: Boolean
  showName: Boolean
  showSTDTestDetails: Boolean
  showSex: Boolean
  showSexualCrimeDetails: Boolean
  stdTestSince: Date
}

input CertCreation {
  birthdate: DateTime!
  issueDate: DateTime!
  name: NonEmptyString!
  sex: Sex!
  verificationCode: NonEmptyString!
}

enum CertType {
  IMMUNIZATION
  SEXUAL_CRIME
  STD_TEST
}

scalar Date

scalar DateTime

scalar EmailAddress

scalar JWT

scalar Latitude

scalar Longitude

type Mutation {
  connectToGoogleOAuth: Boolean
  connectToKakaoOAuth: Boolean
  connectToNaverOAuth: Boolean
  createPost(input: PostCreationInput!): Post
  deletePost(id: ID!): Post
  disconnectFromGoogleOAuth: Boolean
  disconnectFromKakaoOAuth: Boolean
  disconnectFromNaverOAuth: Boolean
  logout: User
  submitCertInfo(input: CertCreation!): Boolean
  takeAttendance: User
  unregister: User
  updateCertAgreement(input: CertAgreementInput!): JWT!
  updateMyCertAgreement(input: CertAgreementInput): CertAgreement
  updatePost(input: PostUpdateInput!): Post
  updateUser(input: UserUpdate!): User
  verifyCertJWT(jwt: JWT!): [Cert!]
  verifyTown(lat: Latitude!, lon: Longitude!): User
  wakeUser: User
}

scalar NonEmptyString

scalar NonNegativeInt

"""
기본값: 내림차순
"""
enum OrderDirection {
  ASC
}

input Pagination {
  lastId: ID
  lastValue: Any
  limit: PositiveInt!
}

scalar PositiveInt

type Post {
  author: User
  content: NonEmptyString
  creationTime: DateTime
  deletionTime: DateTime
  id: ID!
  imageUrls: [URL]
  likeCount: NonNegativeInt
  modificationTime: DateTime
}

input PostCreationInput {
  content: NonEmptyString!
  imageUrls: [URL!]
  parentPostId: ID
}

input PostUpdateInput {
  content: NonEmptyString!
  id: ID!
  imageUrls: [URL!]
}

type Query {
  isUniqueNickname(nickname: NonEmptyString!): Boolean!
  me: User
  myCertAgreement: CertAgreement
  myCerts: [Cert!]
  myNickname: User
  post(id: ID!): Post
  posts: [Post!]
  userByNickname(nickname: NonEmptyString!): User
}

type ServiceAgreement {
  adAgreement: Boolean!
  adAgreementTime: DateTime
  locationAgreement: Boolean!
  locationAgreementTime: DateTime
  personalDataStoringYear: NonNegativeInt!
  privacyAgreement: Boolean!
  privacyAgreementTime: DateTime
  termsAgreement: Boolean!
  termsAgreementTime: DateTime
}

input ServiceAgreementInput {
  adAgreement: Boolean
  locationAgreement: Boolean
  personalDataStoringYear: NonNegativeInt
  privacyAgreement: Boolean
  termsAgreement: Boolean
}

enum Sex {
  FEMALE
  MALE
  OTHER
  UNKNOWN
}

type Town {
  count: NonNegativeInt!
  name: NonEmptyString!
}

scalar URL

scalar UUID

type User {
  bio: String
  birthyear: Int
  blockingEndTime: DateTime
  blockingStartTime: DateTime
  certAgreement: CertAgreement
  cherry: NonNegativeInt!
  creationTime: DateTime!
  email: EmailAddress
  id: UUID!
  imageUrls: [URL!]
  isVerifiedBirthday: Boolean!
  isVerifiedBirthyear: Boolean!
  isVerifiedEmail: Boolean!
  isVerifiedName: Boolean!
  isVerifiedPhoneNumber: Boolean!
  isVerifiedSex: Boolean!
  nickname: String
  serviceAgreement: ServiceAgreement
  sex: Sex!
  towns: [Town!]
}

input UserUpdate {
  bio: NonEmptyString
  certAgreement: CertAgreementInput
  email: EmailAddress
  imageUrls: [URL!]
  nickname: NonEmptyString
  serviceAgreement: ServiceAgreementInput
  town1Name: NonEmptyString
  town2Name: NonEmptyString
}
