scalar Any

type Cert {
  content: String
  effectiveDate: DateTime
  id: ID!
  issueDate: DateTime
  location: String
  name: String
  type: CertType!
}

type CertAgreement {
  immunizationSince: DateTime
  sexualCrimeSince: DateTime
  showBirthdate: Boolean!
  showImmunizationDetails: Boolean!
  showName: Boolean!
  showSTDTestDetails: Boolean!
  showSex: Boolean!
  showSexualCrimeDetails: Boolean!
  stdTestSince: DateTime
}

input CertAgreementInput {
  immunizationSince: DateTime
  sexualCrimeSince: DateTime
  showBirthdate: Boolean
  showImmunizationDetails: Boolean
  showName: Boolean
  showSTDTestDetails: Boolean
  showSex: Boolean
  showSexualCrimeDetails: Boolean
  stdTestSince: DateTime
}

input CertCreation {
  birthdate: DateTime!
  issueDate: DateTime!
  name: NonEmptyString!
  sex: Sex!
  verificationCode: NonEmptyString!
}

enum CertType {
  CLINICAL_LABORATORY_TEST
  IMMUNIZATION
  SEXUAL_CRIME
  STD_TEST
}

type Certs {
  birthdate: DateTime
  creationTime: DateTime!
  id: ID!
  immunizationCerts: [Cert!]
  name: String
  sex: Sex
  sexualCrimeCerts: [Cert!]
  stdTestCerts: [Cert!]
}

scalar DateTime

scalar EmailAddress

enum Grade {
  ENTERPRISE
  FREE
  PRO
}

scalar JWT

scalar Latitude

scalar Longitude

type Mutation {
  createPost(input: PostCreationInput!): Post
  deletePost(id: ID!): Post
  disconnectFromGoogleOAuth: Boolean
  disconnectFromKakaoOAuth: Boolean
  disconnectFromNaverOAuth: Boolean
  logout: User
  submitCert(input: CertCreation!): Cert
  takeAttendance: User
  unregister: User
  updateCertAgreement(input: CertAgreementInput!): JWT!
  updateMyCertAgreement(input: CertAgreementInput): CertAgreement
  updatePost(input: PostUpdateInput!): Post
  updateUser(input: UserUpdate!): User
  verifyCertJWT(jwt: JWT!): Certs
  verifyTown(lat: Latitude!, lon: Longitude!): User
  wakeUser: User
}

scalar NonEmptyString

scalar NonNegativeInt

enum OAuthProvider {
  GOOGLE
  KAKAO
  NAVER
}

"""
기본값: 내림차순
"""
enum OrderDirection {
  ASC
}

input Pagination {
  lastId: ID
  lastValue: Any
  limit: PositiveInt!
}

scalar PositiveInt

type Post {
  author: User
  content: NonEmptyString
  creationTime: DateTime
  deletionTime: DateTime
  id: ID!
  imageUrls: [URL]
  likeCount: NonNegativeInt
  modificationTime: DateTime
}

input PostCreationInput {
  content: NonEmptyString!
  imageUrls: [URL!]
  parentPostId: ID
}

input PostUpdateInput {
  content: NonEmptyString!
  id: ID!
  imageUrls: [URL!]
}

type Query {
  certs: Certs
  isUniqueNickname(nickname: NonEmptyString!): Boolean!
  myCertAgreement: CertAgreement
  myNickname: User
  myVerificationHistories: [VerificationHistory!]
  pendingCerts: [Cert!]
  post(id: ID!): Post
  posts: [Post!]
  sampleCertJWT: JWT!
  user(nickname: NonEmptyString): User
  verificationHistories: [Certs!]
}

type ServiceAgreement {
  adAgreement: Boolean!
  adAgreementTime: DateTime
  locationAgreement: Boolean!
  locationAgreementTime: DateTime
  personalDataStoringYear: NonNegativeInt!
  privacyAgreement: Boolean!
  privacyAgreementTime: DateTime
  termsAgreement: Boolean!
  termsAgreementTime: DateTime
}

input ServiceAgreementInput {
  adAgreement: Boolean
  locationAgreement: Boolean
  personalDataStoringYear: NonNegativeInt
  privacyAgreement: Boolean
  termsAgreement: Boolean
}

enum Sex {
  FEMALE
  MALE
  OTHER
  UNKNOWN
}

type Town {
  count: NonNegativeInt!
  name: String
}

scalar URL

scalar UUID

type User {
  bio: String
  birthyear: Int
  blockingEndTime: DateTime
  blockingStartTime: DateTime
  certAgreement: CertAgreement
  cherry: NonNegativeInt!
  creationTime: DateTime!
  email: EmailAddress
  grade: Grade
  id: UUID!
  imageUrls: [URL!]
  isVerifiedBirthday: Boolean!
  isVerifiedBirthyear: Boolean!
  isVerifiedEmail: Boolean!
  isVerifiedName: Boolean!
  isVerifiedPhoneNumber: Boolean!
  isVerifiedSex: Boolean!
  logoutTime: DateTime
  nickname: String
  oAuthProviders: [OAuthProvider!]
  serviceAgreement: ServiceAgreement
  sex: Sex
  towns: [Town!]
}

input UserUpdate {
  bio: NonEmptyString
  certAgreement: CertAgreementInput
  email: EmailAddress
  imageUrls: [URL!]
  nickname: NonEmptyString
  serviceAgreement: ServiceAgreementInput
  town1Name: NonEmptyString
  town2Name: NonEmptyString
}

type VerificationHistory {
  content: NonEmptyString!
  creationTime: DateTime!
  id: Int!
}
