type Certificate {
  birthDate: String
  certificateId: String
  content: String
  creationTime: DateTime!
  effectiveDate: Date
  issueDate: Date
  name: NonEmptyString
  sex: Sex
  userId: UUID!
}

input CertificateCreationInput {
  birthDate: DateTime!
  issueDate: DateTime!
  name: NonEmptyString!
  sex: Sex!
  verificationCode: NonEmptyString!
}

scalar Date

scalar DateTime

scalar EmailAddress

scalar JWT

scalar LastValue

scalar Latitude

scalar Longitude

type Mutation {
  createPost(input: PostCreationInput!): Post
  deletePost(id: ID!): Post
  logout: Boolean!
  submitCertificateInfo(input: CertificateCreationInput!): Boolean
  unregister: User
  updatePost(input: PostUpdateInput!): Post
  updateUser(input: UserModificationInput!): User
  wakeUser: User
}

scalar NonEmptyString

scalar NonNegativeInt

"""
기본값: 내림차순
"""
enum OrderDirection {
  ASC
}

input Pagination {
  lastId: ID
  lastValue: LastValue
  limit: PositiveInt!
}

scalar PositiveInt

type Post {
  author: User
  content: NonEmptyString
  creationTime: DateTime
  deletionTime: DateTime
  id: ID!
  imageUrls: [URL]
  likeCount: NonNegativeInt
  modificationTime: DateTime
}

input PostCreationInput {
  content: NonEmptyString!
  imageUrls: [URL!]
  parentPostId: ID
}

input PostUpdateInput {
  content: NonEmptyString!
  id: ID!
  imageUrls: [URL!]
}

type Query {
  getCertificateJWT: JWT!
  isUniqueNickname(nickname: NonEmptyString!): Boolean!
  me: User
  post(id: ID!): Post
  posts: [Post!]
  userByNickname(nickname: NonEmptyString!): User
  verifyCertificateJWT(jwt: JWT!): Certificate
}

enum Sex {
  FEMALE
  MALE
  OTHER
  UNKNOWN
}

scalar URL

scalar UUID

type User {
  bio: String
  birthyear: Int
  creationTime: DateTime!
  id: UUID!
  imageUrl: URL
  nickname: String
  sex: Sex!
}

input UserModificationInput {
  ageRange: NonEmptyString
  bio: String
  birthday: NonEmptyString
  email: EmailAddress
  imageUrl: URL
  nickname: NonEmptyString
  phoneNumber: NonEmptyString
  sex: Sex
}
